Browser 
--
  HTML Renderer + CSS Parser + JS Engine 



ECMAScript 
---
  * standard
  * grammar 
  * Implementations:  JS, ActionScript, Google AppScript 

--

NodeJS Ecosystem
--
  
  1. Project Dependencies 
      * some packages are needed for the project's functionality to work 
      * will be part of prod build 

      npm i dropzone 
      npm i dropzone --save 
      npm i dropzone -S 

      will be tracked under in package.json file 

      "dependencies": {
        "dropzone": "6.0.0"
      }

  2. Development Dependencies
      * some packages are needed for the project to be developed 
      * needed during the time of development for better, smoother dev workflow
      * will never be part of prod build 

      npm i webpack --save-dev
      npm i webpack -D

      will be tracked under in package.json file 

      "devDependencies": {
        "webpack": "6.0.0"
      }




Webapps
--
  1. Server Side Rendering (SSR) Apps / Traditional Webapps 
      * pages will refresh 

      Arch 
      ---
        1 Server (Front End + BackEnd + DB Queries)
          Resp: HTML, CSS, JS with Data 

      Codebase
      ---
        Front End (HTML, CSS, JS) + BackEnd (Java/DotNet/PHP) + DB Queries (SQL)

      Adv 
      ---
        1. search engine friendly 

      Disadv
      ---
        1. one server has to do the heavy lifting 
        2. slower webapps 
        3. more bandwidth consumption
        4. more expensive
        5. chaotic codebase 


  2. Client Side Rendering (CSR) Apps  = SPA + REST API 
      * Pages will not refresh 

      Arch 
      --
        2 Servers
          1 Server (Front End App)               - 8080
            Resp: HTML, CSS, JS -- wait for data 

          1 Server (Back End App + DB Queries)   - 8081 
            Resp: Data (JSON)

      Codebase
      --
        Front End App (HTML, CSS, JS) 
          a.k.a Single Page App (SPA)
        
        Back End App (Java/DotNet/PHP/Python/Ruby/Perl/NodeJS + SQL/NoSQL) 
          a.k.a REST API 

      Adv 
      ---
        1. Workload is shared between two servers 
        2. Faster Webapps 
        3. Less bandwidth consumption 
        4. Less Expensive 
        5. Organized Codebase 


      Disadv
      ---
        1. Initial Loading Time will be longer 
        2. Not Search Engine Friendly 

---
Single Page App 
---
  * SPA Library / Framework 
      React JS (Library), 
      Angular (Framework),
      VueJS (Framework)
      
  SPA Characteristics
  ---
    1. Page should not refresh [DONE]
    2. URL should change [DONE]
    3. History should be maintained w/o page refresh [DONE]
    4. Header and Footer should be intact. Should not be loaded again n again  [DONE]
    5. In between header and footer - page should be updated  [DONE]
    6. Active menu should be set [TODO]
    7. Page Title should be changed [TODO]



ReactJS
=====
Components 
  1. Creating Component 
  2. Using Component 

  Types
  ---
    1. Functional Components [RECOMMENDED]
        * were called (before react v 16.8) as stateless components/ dumb components/presentational components 

        1.1 Functional Components with Named Functions 
        1.2 Functional Components with Anonymous Functions 
        1.3 Functional Components with Arrow Functions [RECOMMENDED]
        
    2. Class Components 
        * were called (before react v 16.8) as stateful components/ smart components/ containers 


JSX 
---
  * looks like HTML. but not HTML 
  * all elements should be either self-closed or separately closed
  * you can't have multiple children elements
  * html attribute class should become className


Cross Component Communication 
--
  1. Parent to Child Component Communication [DONE]
      Using Props 

  2. Child to Parent Component Communication [TODO]
      Using Props, States and also Events and callback (Render Props) 

  3. Any to Any Component Communication [LATER]
      Using Redux / Hooks (Context API)




Props 
--


Project Structure
--
  src/
    components/
      Header/
      Footer/
        Footer.js 
        Footer.test.js 
        Footer.css 
      Menu/
      Home/
        Home.js 
        Program/
          Program.js 
    containers/
      RecentMovieList/
        RecentMovieList.js 
  
  
  Routing in React using react-router-dom@6.2.1
--
   npm i react-router-dom@6.2.1


Step 1: identify URLS 
  Home  - localhost:3000/
  Concepts  - localhost:3000/concepts
  About  - localhost:3000/about

Step 2: 
---
  Identify the matching comp for the URL's 
    localhost:3000/   -- Home Comp
    localhost:3000/concepts   -- Concepts Comp
    localhost:3000/about   -- About Comp

Step 3: 
--
  Let's setup the href in Menu comp properly for each Menu
  
Step 4: 
--
  Config the URL's in App.js in between header and footer 

Step 5: 
--
  Check the app. Click the links. Comp's will be loaded in b/w header and footer.

  Let's stop the page refresh

  Replace <a href=''> with <NavLink to=''>

    
Agenda
-- 

  Hooks (3 hours)
  Unit Testing (2-2.5 hours)

  Redux (1 hour)
  --